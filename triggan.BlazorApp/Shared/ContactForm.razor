@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Net;

<EditForm Model=@message OnValidSubmit=@SendMail class="form-group" id="contact">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="form-group">
            <label for="Name"><span class="far fa-user"></span>Name</label>
            <InputText @bind-Value=message.Name />
        </div>
        <div style="flex-shrink: 3;"></div>
        <div class="form-group">
            <label for="EMail"><span class="far fa-envelope"></span>EMail</label>
            <InputText @bind-Value=message.EMail />
        </div>
    </div>
    <div class="form-group">
        <label for="Content"><span class="far fa-question-circle"></span>How can I help you?</label>
        <InputTextArea @bind-Value=message.Content Rows="10" />
    </div>
    <button type="submit" class=""><span class="@submitClass"></span>@submitText</button>
    <span class="small" style="margin: 1em auto;">@result</span>
    @if (inError)
    {
        <button type="button" class="" style="transition: all 2s;">
            <a href=@($"mailto:tristan.robin69@gmail.com?subject=Hey%20from%20{message.Name}&body={WebUtility.UrlEncode(message.Content)}")>
                <span class="far fa-paper-plane"></span>Click to send mail with your mail app/website
            </a>
        </button>
    }
</EditForm>


@code
{
    private BlogModel.Message message = new BlogModel.Message();
    private string result;
    private bool inError;
    private string submitClass = "far fa-paper-plane";
    private string submitText = "Submit";

    private async Task SendMail()
    {
        try
        {
            var tmpIconClass = submitClass;
            submitClass = "fas fa-spinner fa-pulse";
            submitText = "";
            inError = false;
            StateHasChanged();
            result = string.Empty;
            var success = await Http.PostAsJsonAsync($"Message/Contact", message);
            Console.WriteLine(success);
            inError = !success.IsSuccessStatusCode;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            inError = true;
        }
        finally
        {
            result = !inError ? "Your message have been sent! You should receive a copy." : "Unfortunately, an error occurred while sending your message.\nPlease try again later.";
            submitClass = !inError ? "fa fa-check" : "fa fa-times";
            submitText = "Submit";
            StateHasChanged();
        }
    }
}