@page "/project/update/{Slug}"
@inject HttpClient Http
@inject IBlogService blogService

<section class="editor">
    @if (project == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <img class="" src="@project.CoverImagePath" alt="Project banner">
        <h1>@project.Title</h1>
        <span class="small">@project.State</span>
        <span class="small">@project.PublicationDate.ToShortDateString()</span>
        <p class="content">
            @((MarkupString)Markdig.Markdown.ToHtml(project.Excerpt))
        </p>
        <div>
            <GitLogger @ref="logger" />
            <EditForm Model=@newUpdate OnSubmit="@UpdateProject" class="form-group">
                <div class="form-group">
                    <div>
                        <label for="Title">Title</label>
                        <KeystrokeTextInput @bind-Value=newUpdate.Title />
                    </div>
                    <div>
                        <label for="PublicationDate">PublicationDate</label>
                        <InputDate @bind-Value=newUpdate.PublicationDate />
                    </div>
                </div>
                <div class="form-group">
                    <label for="Content">Update content</label>
                    <KeystrokeTextArea @bind-Value=newUpdate.Content Rows="30" />
                </div>
                <h3>@newUpdate.Title</h3>
                <span class="small">@newUpdate.PublicationDate.ToShortDateString()</span>
                @if (!string.IsNullOrEmpty(newUpdate.Content))
                {
                    @((MarkupString)Markdig.Markdown.ToHtml(newUpdate.Content))
                }
                <button type="submit" class="">Submit</button>
            </EditForm>
        </div>
        <hr />
        @foreach (var update in project.Updates)
        {
            @if (!string.IsNullOrEmpty(update?.Content))
            {
                <div>
                    <h3>@update.Title</h3>
                    <span class="small">@update.PublicationDate.ToShortDateString()</span>
                    @((MarkupString)Markdig.Markdown.ToHtml(update.Content))
                </div>
            }
        }
        <a href="/blog">Back</a>
    }
</section>

@code {
    private Project project;
    private Update newUpdate = new Update();
    [Parameter]
    public string Slug { get; set; }
    private GitLogger logger;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            Console.WriteLine($"Trying to get project for edit");
            project = await blogService.GetEntityAsync<Project>(Slug);
        }
        else
        {
            Console.WriteLine($"Project doesn't exist");
        }
    }

    private string result;
    private async Task UpdateProject()
    {
        var tupleResult = await logger.RunWithLogin(async () => await blogService.UpdateProjectAsync(project.Slug, newUpdate));
        result = tupleResult.Item1;
        var success = tupleResult.Item2;
        Console.WriteLine(success);
    }

}
