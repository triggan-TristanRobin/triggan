@page "/blog/edit"
@page "/blog/edit/{Slug}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Task<ContentManager> contentManager

<section class="editor">
    @if (post == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <EditForm Model=@creds class="form-group">
                <div class="form-group">
                    <label for="creds">Git credentils</label>
                    <div class="row">
                        <InputText @bind-Value=creds.Id />
                        <InputText type="password" placeholder="Password" @bind-Value=creds.Password />
                    </div>
                </div>
            </EditForm>
            <EditForm Model=@post OnSubmit="@Write" class="form-group" style="width: 50%;">
                <div class="form-group">
                    <div>
                        <label for="Title">Title</label>
                        <KeystrokeTextInput @bind-Value=post.Title />
                    </div>
                    <div class="row" style="flex-wrap: wrap;padding-top: 0.5em;padding-bottom: 0.5em;">
                        <label for="Slug">Slug</label>
                        <InputText @bind-Value=post.Slug />
                        <label for="Public">Public</label>
                        <InputCheckbox @bind-Value=post.Public />
                    </div>
                    <div>
                        <label for="CoverImagePath">CoverImagePath</label>
                        <InputText @bind-Value=post.CoverImagePath />
                    </div>
                    <div>
                        <label for="Excerpt">Excerpt</label>
                        <InputTextArea @bind-Value=post.Excerpt />
                    </div>
                    <div>
                        <label for="PublicationDate">PublicationDate</label>
                        <InputDate @bind-Value=post.PublicationDate />
                    </div>
                </div>
                <div class="form-group">
                    <label for="Content">Post content</label>
                    <KeystrokeTextArea @bind-Value=post.Content Rows="30" />
                </div>
                <button type="submit" class=""><span class="@submitClass"></span>@submitText</button>
                <span class="small" style="margin: 1em auto;">@result</span>
            </EditForm>

            <div class="post" style="width: 50%;">
                <h1>@post.Title</h1>
                @if (!string.IsNullOrEmpty(post.Content))
                {
                    <p class="content">
                        @((MarkupString)Markdig.Markdown.ToHtml(post.Content))
                    </p>
                }
            </div>
        </div>
        <a href="/blog">Back</a>
    }
</section>

@code {
    [Parameter]
    public string Slug { get; set; }
    private Post post;
    private string result;
    private string submitClass = "";
    private string submitText = "Submit";
    private Credentials creds = new Credentials();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            Console.WriteLine($"Trying to get post for edit");
            post = await (await contentManager).GetEntityAsync<Post>(Slug);
        }
        else
        {
            Console.WriteLine($"New post");
            post = new Post();
            post.PublicationDate = DateTime.Today;
        }
    }

    private async Task Write()
    {
        submitClass = "fas fa-spinner fa-pulse";
        submitText = "";
        StateHasChanged();
        var success = false;
        result = "Cannot currently save a post without credentials for git";
        if (creds.Id != null)
        {
            var authenticated = await Http.PostAsJsonAsync<Credentials>("/Git/Authenticate", creds);
            if (authenticated.IsSuccessStatusCode)
            {
                result = "Unfortunately, an error occurred while saving your post.Please try again later.";
                success = await (await contentManager).PostEntityAsync<Post>(post);
            }
            else
                result = "Could not login with these credentials.";
        }
        result = success ? "Your post is saved on the site! Redirecting..." : result;
        submitClass = success ? "fa fa-check" : "fa fa-times";
        submitText = "Submit";
        StateHasChanged();
        if (success)
        {
            await Task.Delay(500);
            NavigationManager.NavigateTo($"/blog/{post.Slug}", true);
        }
    }

}
