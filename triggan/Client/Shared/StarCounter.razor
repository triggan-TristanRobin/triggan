@inject HttpClient Http
@inject Task<ContentManager> contentManager

<button @onclick="Star" class="counter">
    <i class="fa fa-star"></i>
    @if (inError)
    {
        <span style="color: var(--danger)">!</span>
    }
    <span>@Count</span>
</button>


@code
{
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Slug { get; set; }
    [Parameter]
    public string Type { get; set; }
    private bool inError;
    private bool clicked;

    [Parameter]
    public EventCallback<int> CountChanged { get; set; }

    private async Task Star()
    {
        if (clicked) return;
        clicked = true;
        Count++;
        StateHasChanged();
        var concreteType = typeof(Entity).Assembly.GetType($"Model.{Type}");
        var success = false;
        if (concreteType.IsSubclassOf(typeof(Entity)))
        {
            Console.WriteLine(concreteType);
            var task = (Task)typeof(ContentManager).GetMethod("StarEntity").MakeGenericMethod(concreteType).Invoke(await contentManager, new object[] { Slug });
            await task.ConfigureAwait(false);
            success = (bool)task.GetType().GetProperty("Result").GetValue(task);
        }
        inError = success;
        StateHasChanged();
    }
}